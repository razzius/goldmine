#!/usr/bin/env node
var argv = require('optimist')
    .usage('Count the lines in a file.\nUsage: $0')
    .demand(['c','l'])
    .alias('c','code').alias('l','lib')
    .describe('c', 'code file').describe('l', 'library to be trimmed')
    .argv
;
var UglifyJS = require("uglify-js");
var exec = require('child_process').exec;
var fs = require('fs');
// read the library
var lib, code;
fs.readFile(argv.lib, 'utf8', function(err, data) {
	if (err) {
		return console.log(err);
	}
	var lib = data;
	fs.readFile(argv.code, 'utf8', function(err, data) {
		if (err) {
			return console.log(err);
		}
		var code = data;
		var combined = lib + "'*END*'\n" + code;
		fs.writeFile("combined.js", combined, function(err) {
			if(err) {
				console.log(err);
			}
		});
	});
});


exec('istanbul instrument combined.js', function(error, stdout, stderr) {
	if (error !== null) {
		console.log("Failed to instrument combined javascript file");
	} else {
		var inst = stdout;
		var data = inst.replace(/__cov_[\$\w]+/g, "coverage");
		var code = [
			'var str = JSON.stringify(coverage);',
			'var fs = require("fs");',
			'fs.writeFile("coverage.json", str, function(err) {',
			'    if(err) {',
			'        console.log(err);',
			'    } else {',
			'        console.log("The file was saved!");',
			'    }',
			'});'
		].join("\n");
		data += code;
		fs.writeFile("instrumented.js", data, function(err) {
			if(err) {
				console.log(err);
			}
			exec('js-beautify instrumented.js', function(error, stdout, stderr) {
				console.log("Instrumented target library");
				fs.writeFile("beautiful.js", stdout, function(err) {
					if(err) {
						console.log(err);
					}
				});
				console.log("Made instrumented code readable");
				exec('node beautiful.js', function(error, stdout, stderr) {
					console.log('Running tests:');
					console.log(error, stdout, stderr);
					exec('js-beautify coverage.json', function(error, stdout, stderr) {
						fs.writeFile("coverage.json", stdout);
						parse_instrumented_code();
					});
				});
			});
		});
	}
});

function parse_instrumented_code() {
	fs.readFile("beautiful.js", 'utf8', function(err, data) {
		json = data;
		for (var i = 0; i < 4; i++) {
			json = json.substring(json.indexOf("{") + 1);
		}
		// find this brace's closing bracket
		var stack = ["{", "{"];
		index = 0;
		while (stack.length > 0) {
			if(json.charAt(index) == "{") {
				stack.push("{");
			} else if (json.charAt(index) == "}"){
				stack.pop();
			}
			index++;
		}
		index--;
		//remove from last ; to end
		json = "{" + json.substring(0, index);
		semicolon_char = json.lastIndexOf(";");
		console.log("Trimming coverage report at " + semicolon_char);
		json = json.substring(0, semicolon_char);
		fs.writeFile("original.json", json, function() {

			//code begins here
			console.log("Processing instrumented code output...");
			var exec = require('child_process').exec;
			var fs = require('fs');
			var cov, lib, code;

			fs.readFile('coverage.json', 'utf8', function(err, data) {
				if (err) {
					return console.log(err);
				}
				cov = JSON.parse(data);
				lines = Object.keys(cov.s).length;
				fs.readFile(argv.lib, 'utf8', function(err, code) {
					for (var i=1; i<=lines; i++) {
						if (cov.s[i] >= "1") {
							console.log("keep statement " + i);
						} else {
							console.log("delete statement " + i);
							code = comment_bad_code(i, code);
						}
					}
					// remove nested comments
					code = remove_nested_comments(code);
					// mangle code!!
					var options = {mangle: true };
					var result = UglifyJS.minify(code, {fromString: true});
					var final_code = result.code;
					fs.writeFile('libf.js', final_code);
				});
			});
			function comment_bad_code(statement, data) {
				var map = cov.statementMap;
				var start = map[statement].start;
				var end = map[statement].end;
				var code = comment(start.line - 1, start.column, end.line - 1, end.column, data);
				return code;
			}

			function comment(s_line_no, s_column_no, e_line_no, e_column_no, data) {
				var lines = data.split(/\n/);
				if(s_line_no < lines.length && e_line_no < lines.length) {
					if (s_line_no == e_line_no) {
						e_column_no += 4;
					}
					line = lines[s_line_no];
					prev = line.substr(0, s_column_no);
					rest = line.substr(s_column_no);
					lines[s_line_no] = prev + " /* " + rest;

					line = lines[e_line_no];
					prev = line.substr(0, e_column_no);
					rest = line.substr(e_column_no);
					lines[e_line_no] = prev + " */ " + rest;
					code = lines.join("\n");
				}
				return code;
			}

			function remove_nested_comments(data) {
				var length = data.length;
				console.log(length);
				var depth = 0;
				for (var i = 0; i < length; i++) {
					if (data.charAt(i) == "/" && data.charAt(i+1) == "*") {
						if (depth === 0) {
							depth++;
						} else {
							depth++;
							prev = data.substring(0, i);
							rest = data.substring(i+2);
							data = prev + rest;
						}
					} else if (data.charAt(i) == "*" && data.charAt(i+1) == "/") {
						if (depth === 1) {
							depth = 0;
						} else {
							prev = data.substring(0, i);
							rest = data.substring(i+2);
							data = prev + rest;
							depth--;
						}
					}
				}
				return data;
			}
		});
	});
}

function nth_occurrence (string, char, nth) {
	var first_index = string.indexOf(char);
	var length_up_to_first_index = first_index + 1;
	if (nth == 1) {
		return first_index;
	} else {
		var string_after_first_occurrence = string.slice(length_up_to_first_index);
		var next_occurrence = nth_occurrence(string_after_first_occurrence, char, nth - 1);
		if (next_occurrence === -1) {
			return -1;
		} else {
			return length_up_to_first_index + next_occurrence;
		}
	}
}

